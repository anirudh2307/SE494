import pandas as pd
import numpy as np
from numpy import genfromtxt

import csv

fileName = 'cov_mat_2007-01-03.csv'
outputFile = 'universe_output.csv'

#maybe try to make this a dictionary reference by tuple
row = []
column = []
cov = []
covMatrix = {}
 
with open(fileName) as csvDataFile:
    csvReader = csv.reader(csvDataFile)
    for col in csvReader:

        row.append(col[1])
        column.append(col[2])
        cov.append(col[3])
#lines of matrix in separate lists
for i in range(1,len(row)):
	#covMatrix.append([row[i],column[i],float(cov[i])])
	covMatrix[(row[i],column[i])] = float(cov[i])
print(covMatrix)

output = []

with open(outputFile) as dataFile:
	dataFile = csv.reader(dataFile)
	for col in dataFile:
		output.append(col)

#dictionaries by SEDOL reference
sector = {}
beta = {}
rank = {}
name = {}
bench = {}
mcap = {}

for i in range(1,len(output)):
	sector[output[i][1]] = output[i][2]
	beta[output[i][1]] = int(output[i][3])
	rank[output[i][1]] = int(output[i][4]) #use this an not rankNZ
	name[output[i][1]] = output[i][5]
	bench[output[i][1]] = float(output[i][6])
	mcap[output[i][1]] = output[i][7]

"""sector = {}
beta = {}
betabench = {}
rank = {}
name = {}
bench = {}
benchweight = {}
mcap = {}

#needs to be reconfigured with new data sets

for i in range(1,len(output)):
	sector[output[i][1]] = output[i][2]
	betabench[output[i][1]] = float(output[i][3])
	beta[output[i][1]] = float(output[i][4])
	rankNz[output[i][1]] = int(output[i][5])
	rank[output[i][1]] = float(output[i][6])
	name[output[i][1]] = output[i][7]
	benchweight[output[i][1]] = float(output[i][8])
	mcap[output[i][1]] = """
#how do we use the new data with multiple dates? should they be split up into their own dictionaries or all at once?

#testcode
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import cvxopt as opt
from cvxopt import blas, solvers
import pandas as pd

np.random.seed(123)

def rand_weights(n):
    ''' Produces n random weights that sum to 1 '''
    k = np.random.rand(n)
    return k / sum(k)

def random_portfolio(returns):
    ''' 
    Returns the mean and standard deviation of returns for a random portfolio
    '''

    p = np.asmatrix(np.mean(returns, axis=1))
    w = np.asmatrix(rand_weights(returns.shape[0]))
    C = np.asmatrix(np.cov(returns))
    
    mu = w * p.T
    sigma = np.sqrt(w * C * w.T)
    
    # This recursion reduces outliers to keep plots pretty
    if sigma > 2:
        return random_portfolio(returns)
    return mu, sigma

def optimal_portfolio(returns):
    n = len(returns)
    returns = np.asmatrix(returns)
    
    N = 100
    mus = [10**(5.0 * t/N - 1.0) for t in range(N)]
    
    # Convert to cvxopt matrices
    S = opt.matrix(np.cov(returns))
    pbar = opt.matrix(np.mean(returns, axis=1))
    
    # Create constraint matrices
    G = -opt.matrix(np.eye(n))   # negative n x n identity matrix
    h = opt.matrix(0.0, (n ,1))
    A = opt.matrix(1.0, (1, n))
    b = opt.matrix(1.0)
    
    # Calculate efficient frontier weights using quadratic programming
    portfolios = [solvers.qp(mu*S, -pbar, G, h, A, b)['x'] 
                  for mu in mus]
    ## CALCULATE RISKS AND RETURNS FOR FRONTIER
    returns = [blas.dot(pbar, x) for x in portfolios]
    risks = [np.sqrt(blas.dot(x, S*x)) for x in portfolios]
    ## CALCULATE THE 2ND DEGREE POLYNOMIAL OF THE FRONTIER CURVE
    m1 = np.polyfit(returns, risks, 2)
    x1 = np.sqrt(m1[2] / m1[0])
    # CALCULATE THE OPTIMAL PORTFOLIO
    wt = solvers.qp(opt.matrix(x1 * S), -pbar, G, h, A, b)['x']
    return np.asarray(wt), returns, risks

